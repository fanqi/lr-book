<h4>Cash Flow Analysis in USD <i>(as of today)</i></h4><hr/>

<aui:row>
	<aui:column>
		<div id="gridContainer"></div>
	</aui:column>	
</aui:row>

<aui:script>
	AUI().ready(function(A) {
	
		var divForMasking = A.one('#p_p_id_report_WAR_fingenceportlet_');
		if (divForMasking.loadingmask == null) {
			divForMasking.plug(A.LoadingMask, { background: '#F0F0F0' });
            divForMasking.loadingmask.toggle();
		}
			
		Liferay.Service(
  			'/fingence-portlet.myresult/get-cash-flow',
  			{
    			portfolioIds: '<%= portfolioIds %>'
  			},
  			function(data) {
  			
  				showCashFlowDataTable(data, '#gridContainer', 'Cash Flow');
  				
  				var legend = {
			    	enabled: true,
			    	align: 'right',
		        	borderColor: 'grey',
		        	borderWidth: 1,
			    	layout: 'vertical',
			    	verticalAlign: 'top',
			    	y: 100
  				};
  				
				<!-- renderPieChart(data, 'Collateral Breakup', legend); -->
				divForMasking.loadingmask.toggle();
  			}
		);
	});
	
	function appendCashFlowSummaryRow(data) {
	
		var dataWithSummary = data.slice();
		
<!-- 		var summaryRow = {}; -->
<!-- 		summaryRow.summary = true; -->
<!-- 		summaryRow.bucket = '<b>Total</b>'; -->
<!-- 		summaryRow.market_value = 0.0; -->
<!-- 		summaryRow.bond_holdings_percent = 0.0; -->
<!-- 		summaryRow.total_holdings_percent = 0.0; -->
		
<!-- 		_.each(data, function(item){ -->
<!-- 			summaryRow.market_value += item.market_value; -->
<!-- 			summaryRow.bond_holdings_percent += item.bond_holdings_percent; -->
<!-- 			summaryRow.total_holdings_percent += item.total_holdings_percent -->
<!-- 		}); -->
		
<!-- 		dataWithSummary.push(summaryRow); -->
		
		return dataWithSummary;
	}
	
	function showCashFlowDataTable(data, divId, title) {
	
		console.log(JSON.stringify(data));
	
		var dataWithSummary = appendCashFlowSummaryRow(data);
		YUI().use(
			'aui-datatable',
		  	function(Y) {
		    	var columns = [
		    		{
		    			key: 'portfolioName',
			 			label: 'Portfolio Name'
		    		},
		    		{
		    			key: 'date',
			 			label: 'Date'
		    		},
		    		{
		    			key: 'nameSecurityDes',
			 			label: 'Security Name & Description'
		    		},
		    		{
		    			key: 'securityID',
			 			label: 'Security ID'
		    		},
		    		{
		    			key: 'purchaseQty',
			 			label: 'Purchase Qty',
		             	formatter: function(obj) {
							obj.value = accounting.toFixed(obj.value, 5);
						},	 			
						allowHTML : true
		    		},
		    		{
		    			key: 'amountOutstanding',
			 			label: 'Amount Outstanding',
			 			formatter: function(obj) {
			 				obj.value = formatCurrency(obj.value, obj.data.currencySymbol);
			 			},
						allowHTML : true
		    		},
		    		{
		    			key: 'Transaction',
			 			label: 'transaction',
			 			formatter: function(obj) {
			 				obj.value = formatCurrency(obj.value, obj.data.currencySymbol);
			 			},
						allowHTML : true
		    		},
		    		{
		    			key: 'cashFlow',
			 			label: 'Cash Flow',
			 			formatter: function(obj) {
			 				obj.value = formatCurrency(obj.value, obj.data.currencySymbol);
			 			},
						allowHTML : true
		    		},
		    		{
		    			key: 'currency',
			 			label: 'Currency'
		    		},
		    		{
		    			key: 'currencyConversionRate',
			 			label: 'Currency conversion rate',
		             	formatter: function(obj) {
							obj.value = accounting.toFixed(obj.value, 3);
						}			 			
		    		},
		    		{
		    			key: 'cashFlowCurrency',
			 			label: 'Cash flow <br>in Currency',
			 			formatter: function(obj) {
			 				obj.value = formatCurrency(obj.value, obj.data.currencySymbol);
			 			},
						allowHTML : true
		    		}			 		
		   	 	];
		   
		   		var placeHolderDiv = AUI().one(divId);
				
				if (placeHolderDiv != null) {
			   		new Y.DataTable({
						columnset: columns,
					    recordset: dataWithSummary
					}).render(divId);				
				}
		  	}
		);
	}
</aui:script>