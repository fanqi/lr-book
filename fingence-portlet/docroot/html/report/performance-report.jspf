<aui:row>
	<aui:column>
		<liferay-ui:header title="top-gainers"/>
		<div id="topGainers"></div>
	</aui:column>
	<aui:column>
		<liferay-ui:header title="top-losers"/>
		<div id="topLosers"></div>
	</aui:column>	
</aui:row>

<aui:script>
	AUI().ready(function(A) {
	
		var divForMasking = A.one('#p_p_id_report_WAR_fingenceportlet_');
		if (divForMasking.loadingmask == null) {
			divForMasking.plug(A.LoadingMask, { background: '#F0F0F0' });
            divForMasking.loadingmask.toggle();
		}
		
		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioIds: '<%= portfolioIds %>'
  			},
  			function(data) {
				
				//1. Top Gainers Grid
				showDataTable(data, 'desc','#topGainers', 'Gain');
				
				//2.Top Losers Grid
				showDataTable(data, 'asc','#topLosers', 'Loss');
				
				divForMasking.loadingmask.toggle();
  			}
		);
	});
		
	function showDataTable(data, sortOrder, divId, title){
		var sorted = _.sortBy(data,'gain_loss_percent');
		var totalInvestment = getAssetItemWeightage(data, sortOrder);
		
		if (sortOrder == 'desc') {
			sorted = sorted.reverse();
			for (var i=0; i<sorted.length; i++) {
				var item = sorted[i];
				if (item.gain_loss < 0) {
					sorted.splice(i);
				}
			}
		} 
		
		if (sortOrder == 'asc') {
			for (var i=0; i<sorted.length; i++) {
				var item = sorted[i];
				if (item.gain_loss >= 0) {
					sorted.splice(i);
				}
			}
		}
		
		sorted = sorted.slice(0,<%= assetsToShow %>);		
		
<!-- 		Security Name	name + security_des -->
<!-- 		Purchase Date	purchase_dt -->
<!-- 		Purchase Price	purchase_price -->
<!-- 		Current Price	last_price or bid_price -->

<!-- 		Holding Period (in Yrs)	current date - purchase_dt (In Yrs) -->
<!-- 		(A) Capital Gains	Except for Bonds: (last_price - purchase_price) * purchase_qty. For Bonds: ((bid_price - purchase_price)/100) * purchase_qty.   -->
<!-- 		(B) Income	Dividend, coupon payment.  -->
<!-- 		Total Returns	A+B -->
<!-- 		Avg Holding period return	Total Returns / Holding Period (in Yrs) -->
		
		if (sorted.length > 0) {
			YUI().use(
				'aui-datatable',
			  	function(Y) {
			    	var columns = [
			    		{
			    			key: 'name',
			    			label: 'Security Name', 
			    			formatter: function(obj) {
				 				obj.value = obj.data.name + ' ' + obj.data.security_des;
				 			},
				 			allowHTML: true,
			    			sortable: true
			    		},
				 		{
				 			key: 'purchaseDate',
				 			label: 'Purchase Date',
				 			formatter: function(obj) {
				 				obj.value = formatDate(obj.value);
				 			},
				 			allowHTML: true,
				 			sortable: true
				 		},
				 		{
				 			key: 'purchasedMarketValue',
				 			label: 'Purchase Price',
				 			formatter: function(obj) {
				 				obj.value = formatCustom(obj.value, 'amount');
				 			},
				 			allowHTML: true,
				 			sortable: true
				 		},
				 		{
				 			key: 'currentMarketValue',
				 			label: 'Current Price',
				 			formatter: function(obj) {
				 				obj.value = formatCustom(obj.value, 'amount');
				 			},
				 			allowHTML: true,
				 			sortable: true
				 		},
				 		{
				 			key: 'purchaseDate',
				 			label: 'Holding Period <br/>(in Yrs)',
				 			formatter: function(obj) {
				 				obj.value = formatYears(obj.value);
				 			},
				 			allowHTML: true,
				 			sortable: true
				 		},
				 		{
				 			key: 'gain_loss',
				 			label: 'Capital Gains',
				 			formatter: function(obj) {
				 				obj.value = formatCustom1(obj.value, 'amount');
				 			},
				 			allowHTML: true,
				 			sortable: true
				 		},
				 		{
				 			key: 'income',
				 			label: 'Income',
				 			formatter: function(obj) {
				 				obj.value = formatCustom(obj.value, 'amount');
				 			},
				 			allowHTML: true,
				 			sortable: true
				 		},
				 		{
				 			key: 'total_returns',
				 			label: 'Total Returns',
				 			formatter: function(obj) {
				 				obj.value = formatCustom(obj.data.gain_loss + obj.data.income, 'amount');
				 			},
				 			allowHTML: true,
				 			sortable: true
				 		},
				 		{
				 			key: 'avg_holding_period_return',
				 			label: 'Avg Holding period return',
				 			formatter: function(obj) {
				 				obj.value = formatCustom((obj.data.gain_loss + obj.data.income)/formatYears(obj.data.purchaseDate), 'amount');
				 			},
				 			allowHTML: true,
				 			sortable: true
				 		}
			   	 	];
			   
					var placeHolderDiv = AUI().one(divId);
				
					if (placeHolderDiv != null) {			   
				   		new Y.DataTable({
							columnset: columns,
					    	recordset: sorted
						}).render(divId);
					}
			  	}
			);
		} 
	}
	
	function getAssetItemWeightage(data, sortOrder){
		var total = 0;
		_.each(data, function(item) {
			var value = item.gain_loss;
			if ((sortOrder == 'asc' && value < 0) || (sortOrder == 'desc' && value > 0)) {
				total += value;
			}
		});
		return total;
	}
	
</aui:script>