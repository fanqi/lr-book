<h2>Asset Reports</h2>

<aui:row>
	<aui:column>
		<h4>Net Worth: <lable id="<portlet:namespace/>networthLabel"/></h4>
	</aui:column>
	<aui:column>
	</aui:column>	
</aui:row>

<liferay-ui:panel-container accordion="<%= true %>">
	<liferay-ui:panel title="breakup-by-currency" extended="<%= true %>" collapsible="<%= true %>">
		<aui:row>
			<aui:column>
				<div id="container1"></div>
			</aui:column>
			<aui:column>
				some information
			</aui:column>
		</aui:row>
	</liferay-ui:panel>
	
	<liferay-ui:panel title="breakup-by-country-of-risk" extended="<%= true %>" collapsible="<%= true %>" defaultState="close">
		<aui:row>
			<aui:column>
				<div id="container2"></div>
			</aui:column>
			<aui:column>
				some information
			</aui:column>
		</aui:row>
	</liferay-ui:panel>	
	
	<liferay-ui:panel title="top-gainers" extended="<%= true %>" collapsible="<%= true %>" defaultState="close">
		<div id="topGainers"></div>
	</liferay-ui:panel>		
	
	<liferay-ui:panel title="top-losers" extended="<%= true %>" collapsible="<%= true %>" defaultState="close">
		<div id="topLosers"></div>
	</liferay-ui:panel>		
</liferay-ui:panel-container>

<aui:script>
	AUI().ready(function(A) {
		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioId: 401
  			},
  			function(data) {
  			
  				// 1. networth
				A.one('#<portlet:namespace/>networthLabel').text(getTotalNetWorth(data));
				
				//2. Pie Chart - By Currency
				renderChart(data, 'currency_', '#container1', 'By Currency');
				
				//3. Pie Chart - By Country of Risk
				renderChart(data,'countryOfRiskName', '#container2', 'By Country Of Risk');
				
				//4. Top Gainers Grid
				showDataTable(data, 'desc','#topGainers', 'Top Gainers');
				
				//5.Top Losers Grid
				showDataTable(data, 'asc','#topLosers', 'Top Losers');
  			}
		);	
	});
	
	function renderChart(data, groupBy, divId, title){
		var dataArray = new Array();
		var netWorth = 0;
		var i=0;
		
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			netWorth = item[0].currentMarketValue;
			_.reduce(item, function(sum, val) {
			    netWorth += val.currentMarketValue;
		  	});
		  	dataArray[i] = new Array(key,netWorth);
		  	i++;
		});		
		
		$(divId).highcharts({
	        chart: {
	            plotBackgroundColor: null,
	            plotBorderWidth: null,
	            plotShadow: false
	        },
	        title: {
	            text: title
	        },
	        tooltip: {
	    	    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
	        },
	        plotOptions: {
	            pie: {
	                allowPointSelect: true,
	                cursor: 'pointer',
	                dataLabels: {
	                    enabled: true,
	                    color: '#000000',
	                    connectorColor: '#000000',
	                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'
	                }
	            }
	        },
	        series: [{
	            type: 'pie',
	            name: title,
	            data: dataArray
	        }]
	    });	
	}
	
	function showDataTable(data, sortOrder, divId, title){
		var sorted = _.sortBy(data,'gain_loss');
		var dataTableHeading = new String();
		
		if (sortOrder == 'desc') {
			sorted = sorted.reverse();
		}
		sorted = sorted.slice(0,7);
		
		YUI().use(
			'aui-datatable',
		  	function(Y) {
		    	var columns = 
		    		[
		    			{
			 				key: 'name',
			 				label: 'Asset Name'
			 			},
			 			{
			 				key: 'gain_loss',
			 				label: title
			 			},
		   	 		];
		   
		   		new Y.DataTable.Base({
					columnset: columns,
			    	recordset: sorted
				}).render(divId);
		  	}
		);
	}
	
	function getTotalNetWorth(data){
		var netWorth = 0;
		_.each(data, function(itemValue){
			netWorth += itemValue.currentMarketValue;
		},data);
	  	return netWorth;
	}
</aui:script>