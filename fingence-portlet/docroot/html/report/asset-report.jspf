<h3>Net Worth: <lable id="<portlet:namespace/>networthLabel"/></h3>

<%
	int index = (allocationBy - 1);
	String[] groupByField = {"countryOfRiskName", "currency_", "security_class", "industry_sector"};
	String[] groupByTitle = {"Risk Country", "Currency", "Security Type", "Sector"};	
%>

<aui:row>
	<aui:column columnWidth="50">
		<div id="chartContainer"></div>
	</aui:column>
	<aui:column>
		<div id="gridContainer"></div>
	</aui:column>	
</aui:row>

<hr/><div id="slicePortfolio"></div>

<aui:script>
	AUI().ready(function(A) {
	
		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioId: '<%= portfolioId %>'
  			},
  			function(data) {
  			
  				var netWorth = getTotalNetWorth(data);
  			
  				// 1. networth
				A.one('#<portlet:namespace/>networthLabel').text(formatCustom(netWorth, 'amount'));
				
				//2. Pie Chart - By Currency
				renderChart(data, '<%= groupByField[index] %>', '#chartContainer', '<%= groupByTitle[index] %>');
				
				//4. Group By currency with Weightage.
				showWeightage(data, '<%= groupByField[index] %>', '#gridContainer', '<%= groupByTitle[index] %>', netWorth);
  			}
		);
	});
	
	function getDataGroupedBy(data, groupBy, netWorth) {
		var resultantDataArray = [];
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			var resultantObj = {};
			var totalCurrentValue = 0;
			var totalUsdInvested = 0;
			_.each(item,function(item){
				totalCurrentValue += item.currentMarketValue;
				totalUsdInvested += (item.currentMarketValue * item.current_fx);
			});
			
			if (key == '' || key == '0') {
				key = 'Un-Specified';
			}
			
			resultantObj._key = key;
			resultantObj.currentMarketValue = totalCurrentValue;
			resultantObj.usdInvested = totalUsdInvested;
			resultantObj.weightage = totalCurrentValue/netWorth*100;
			
			resultantDataArray.push(resultantObj);
		});	
		return resultantDataArray;
	}
	
	function showWeightage(data, groupBy, divId, title, netWorth) {
		var jsonArr = getDataGroupedBy(data, groupBy, netWorth);
		YUI().use(
			'aui-datatable',
		  	function(Y) {
		    	var columns = [
		    		{
		    			key: '_key',
		    			label: title,
		    			formatter: function(obj){
		    				if(obj.value != 'Un-Specified'){
		    					obj.value = '<a href="#slicePortfolio" onclick="javascript:sliceChart(\'' + obj.value + '\');">' + obj.value + '</a>';
		    				}
    					},
    					allowHTML:true
	    			},
			 		{
			 			key: 'currentMarketValue', 
			 			label: 'Current Value',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
			 			allowHTML:true		 			
			 		},
			 		{
			 			key: 'usdInvested', 
			 			label: 'USD Invested',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
			 			className: (title !='Currency')?'hideColumn':'',
			 			allowHTML:true
			 		},
			 		{
			 			key: 'weightage', 
			 			label: 'Weight',
			 			formatter:function(obj) {
				 			obj.value = formatCustom(obj.value, 'percent');
				 		},
				 		allowHTML:true
			 		}
		   	 	];
		   
		   		new Y.DataTable.Base({
					columnset: columns,
			    	recordset: jsonArr
				}).render(divId);
		  	}
		);
	}
	
	function getModifiedArray(data, groupBy) {
		var dataArray = new Array();
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			var value = item[0].currentMarketValue;
			_.reduce(item, function(sum, obj) {
			    value += obj.currentMarketValue;
		  	});
		  	
		  	if (key == '' || key == '0') {
				key = 'Un-Specified';
			}
		  	dataArray.push(new Array(key, value));
		});	
		return dataArray;	
	}	
	
	function renderChart(data, groupBy, divId, title){
		
		var dataArray = getModifiedArray(data, groupBy);
				
		$(divId).highcharts({
	        chart: {
	            plotBackgroundColor: null,
	            plotBorderWidth: null,
	            plotShadow: false,
	        },
	        title: {
	            text: title
	        },
	        tooltip: {
	    	    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
	        },
	        plotOptions: {
	            pie: {
	            	size: "60%",
	                allowPointSelect: true,
	                cursor: 'pointer',
	                dataLabels: {
	                    enabled: true,
	                    color: '#000000',
	                    connectorColor: '#000000',
	                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'
	                }
	            }
	        },
	        series: [{
	            type: 'pie',
	            name: title,
	            data: dataArray,
	            events:{
	                click: function (event) {
	                    sliceChart(event.point.name);
	                }
              	}
	        }]
	    });
    
	    
	}
	
	function sliceChart(sliceBy){
	
		var portfolioId = '<%= portfolioId %>';
		var allocationBy = '<%= allocationBy %>'
		var allocationParam = new String();
		
		if (allocationBy == <%= IConstants.BREAKUP_BY_RISK_COUNTRY %>){
			allocationParam = '<%= groupByField[0] %>';
		} else if(allocationBy == <%= IConstants.BREAKUP_BY_CURRENCY %>){
			allocationParam = '<%= groupByField[1] %>';
		} else if(allocationBy == <%= IConstants.BREAKUP_BY_SECURITY_TYPE %>){
			allocationParam = '<%= groupByField[2] %>';
		}else if(allocationBy == <%= IConstants.BREAKUP_BY_SECTOR %>){
			allocationParam = '<%= groupByField[3] %>';
		}
		
	 	renderPieChartSectionInfo(portfolioId, allocationBy, allocationParam, sliceBy);
	}
	
	function renderPieChartSectionInfo(portfolioId, allocationBy, allocationParam, sliceBy){
		AUI().ready(function(A) {
			
			Liferay.Service(
	  			'/fingence-portlet.myresult/get-my-results',
	  			{
	    			portfolioId: '<%= portfolioId %>'
	  			},
	  			function(data) {
	  				showPortfolioItems(data, allocationParam, sliceBy, '#slicePortfolio');
	  			}
			);
		});
	}
	
	function showPortfolioItems(data, allocationParam, sliceBy, divId){
	
		var jsonArray = [];
		_(_.groupBy(data, allocationParam)).map(function(itemList, key) {	
			if (key == sliceBy) {
				_.each(itemList, function(item){
					var jsonObj = {};
					jsonObj.name = item.name;
					jsonObj.ticker = item.security_ticker;
					jsonObj.purchasedValue = item.purchasedMarketValue;
					jsonObj.currentValue = item.currentMarketValue;
					jsonObj.gainLoss = item.gain_loss;
					jsonObj.gainLossPerc = item.gain_loss_percent;
					jsonArray.push(jsonObj);
				});
			}
		});
		
		var divContent = document.getElementById('slicePortfolio');
		if (divContent) {
			divContent.innerHTML = "";
		}
		
		YUI().use(
			'aui-datatable',
		  	function(Y) {
		    	var columns = [
		    		{key: 'name', label: 'Portfolio'},
		    		{key: 'ticker', label: 'Security Ticker'},
		    		{
			 			key: 'purchasedValue', 
			 			label: 'Purchased Value',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
			 			allowHTML:true		 			
			 		},
			 		{
			 			key: 'currentValue', 
			 			label: 'Current Value',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
			 			allowHTML:true		 			
			 		},
			 		{
			 			key: 'gainLoss', 
			 			label: 'Gain/Loss',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
			 			allowHTML:true		 			
			 		},
			 		{
			 			key: 'gainLossPerc', 
			 			label: 'Gain/Loss%',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'percent');
			 			},
			 			allowHTML:true		 			
			 		}
		   	 	];
		   
		   		new Y.DataTable.Base({
					columnset: columns,
			    	recordset: jsonArray
				}).render(divId);
		  	}
		);
		
	}
	
	function getTotalNetWorth(data){
		var value = 0;
		_.each(data, function(itemValue){
			value += itemValue.currentMarketValue;
		});
	  	return value;
	}
</aui:script>