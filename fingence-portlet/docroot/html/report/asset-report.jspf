<h5>Net Worth: <lable id="<portlet:namespace/>networthLabel"/></h5>

<%
	int index = (allocationBy - 1);
	String[] groupByField = {"countryOfRiskName", "currency_", "security_class", "industry_sector"};
	String[] groupByTitle = {"Risk Country", "Currency", "Security Type", "Sector"};	
%>

<aui:row>
	<aui:column>
		<div id="chartContainer"></div>
	</aui:column>
	<aui:column>
		<div id="gridContainer"></div>
	</aui:column>	
</aui:row>

<aui:script>
	AUI().ready(function(A) {
	
		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioId: '<%= portfolioId %>'
  			},
  			function(data) {
  			
  				var netWorth = getTotalNetWorth(data);
  			
  				// 1. networth
				A.one('#<portlet:namespace/>networthLabel').text(showInMillions(netWorth));
				
				//2. Pie Chart - By Currency
				renderChart(data, '<%= groupByField[index] %>', '#chartContainer', '<%= groupByTitle[index] %>');
				
				//4. Group By currency with Weightage.
				showWeightage(data, '<%= groupByField[index] %>', '#gridContainer', '<%= groupByTitle[index] %>', netWorth);
  			}
		);
	});
	
	function getDataGroupedBy(data, groupBy, netWorth) {
		var resultantDataArray = [];
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			var resultantObj ={};
			var totalCurrentValue = 0;
			var totalUsdInvested = 0;
			_.each(item,function(item){
				totalCurrentValue += item.currentMarketValue;
				totalUsdInvested += (item.currentMarketValue * item.current_fx);
			});
			resultantObj._key = key;
			resultantObj.currentMarketValue = totalCurrentValue;
			resultantObj.usdInvested = totalUsdInvested;
			resultantObj.weightage = totalCurrentValue/netWorth*100;
			
			resultantDataArray.push(resultantObj);
		});	
		return resultantDataArray;
	}
	
	function showWeightage(data, groupBy, divId, title, netWorth) {
		var jsonArr = getDataGroupedBy(data, groupBy, netWorth);
		YUI().use(
			'aui-datatable',
		  	function(Y) {
		    	var columns = [
		    		{
		    			key: '_key',
		    			label: title,
		    			formatter: '<a href="javascript:void(0);" onclick="javascript:sliceChart(\'{value}\');">{value}</a>'
	    			},
			 		{
			 			key: 'currentMarketValue', 
			 			label: 'Current Value',
			 			formatter: function(obj) {
			 				obj.value = accounting.formatMoney(obj.value);
			 			}			 			
			 		},
			 		{
			 			key: 'usdInvested', 
			 			label: 'USD Invested',
			 			formatter: function(obj) {
			 				obj.value = accounting.formatMoney(obj.value);
			 			},
			 			className: (title !='Currency')?'hideColumn':''
			 		},
			 		{
			 			key: 'weightage', 
			 			label: 'Weightage (%)',
			 			formatter:function(obj) {
				 			obj.value = (obj.value).toFixed(2) + '%';
				 		}
			 		}
		   	 	];
		   
		   		new Y.DataTable.Base({
					columnset: columns,
			    	recordset: jsonArr
				}).render(divId);
		  	}
		);
	}
	
	function getModifiedArray(data, groupBy) {
		var dataArray = new Array();
		
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			var value = item[0].currentMarketValue;
			_.reduce(item, function(sum, obj) {
			    value += obj.currentMarketValue;
		  	});
		  	dataArray.push(new Array(key, value));
		});	
		return dataArray;	
	}	
	
	function renderChart(data, groupBy, divId, title){
		
		var dataArray = getModifiedArray(data, groupBy);
				
		$(divId).highcharts({
	        chart: {
	            plotBackgroundColor: null,
	            plotBorderWidth: null,
	            plotShadow: false,
	        },
	        title: {
	            text: title
	        },
	        tooltip: {
	    	    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
	        },
	        plotOptions: {
	            pie: {
	            	size:'60%',
	                allowPointSelect: true,
	                cursor: 'pointer',
	                dataLabels: {
	                    enabled: true,
	                    color: '#000000',
	                    connectorColor: '#000000',
	                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'
	                }
	            }
	        },
	        series: [{
	            type: 'pie',
	            name: title,
	            data: dataArray,
	            events:{
	                click: function (event) {
	                    sliceChart(event.point.name);
	                }
              	}
	        }]
	    });	    
	}
	
	function sliceChart(sliceBy){
		var portfolioId = '<%= portfolioId %>';
		var allocationBy = '<%= allocationBy %>'
		var allocationParam = new String();
		
		if (allocationBy == <%= IConstants.BREAKUP_BY_RISK_COUNTRY %>){
			allocationParam = '<%= groupByField[0] %>';
		} else if(allocationBy == <%= IConstants.BREAKUP_BY_CURRENCY %>){
			allocationParam = '<%= groupByField[1] %>';
		} else if(allocationBy == <%= IConstants.BREAKUP_BY_SECURITY_TYPE %>){
			allocationParam = '<%= groupByField[2] %>';
		}else if(allocationBy == <%= IConstants.BREAKUP_BY_SECTOR %>){
			allocationParam = '<%= groupByField[3] %>';
		}
		
	 	var portfolioDetailsURL = Liferay.PortletURL.createRenderURL();
	 	portfolioDetailsURL.setPortletId('report_WAR_fingenceportlet');
	 	portfolioDetailsURL.setParameter('jspPage', '/html/report/portfolio-details.jsp');
	 	portfolioDetailsURL.setParameter('portfolioId', portfolioId);
	 	portfolioDetailsURL.setParameter('allocationParam', allocationParam);
	 	portfolioDetailsURL.setParameter('sliceBy', sliceBy);
		portfolioDetailsURL.setWindowState('<%= LiferayWindowState.POP_UP.toString() %>');
								
		AUI().use('aui-dialog', 'aui-dialog-iframe', function(A) {
			Liferay.Util.openWindow({
               	dialog: {
               		destroyOnHide: true,
                   	centered: true,
                   	modal: true,
                    width: 600,
                   	height: 500
               	},
               	id: '<portlet:namespace/>portfolioItemsListing',
               	title: 'Portfolio Items Details',
               	uri: portfolioDetailsURL
           	});
           	Liferay.provide(
                window, '<portlet:namespace/>reloadPortlet', function() {
                	Liferay.Portlet.refresh('#p_p_id<portlet:namespace/>');
               	}
           	);			
		}); 
	}
	
	function getTotalNetWorth(data){
		var value = 0;
		_.each(data, function(itemValue){
			value += itemValue.currentMarketValue;
		});
	  	return value;
	}
</aui:script>