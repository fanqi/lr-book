<h5>Net Worth: <lable id="<portlet:namespace/>networthLabel"/></h5>

<%
	int index = allocationBy - 1;
	String[] groupByField = {"countryOfRiskName", "currency_", "security_class", "sector"};
	String[] groupByTitle = {"By Risk Country", "By Currency", "By Security Type", "By Sector"};
%>

<aui:row>
	<aui:column>
		<div id="chartContainer"></div>
	</aui:column>
	<aui:column>
		<div id="gridContainer"></div>
	</aui:column>	
</aui:row>

<aui:script>
	AUI().ready(function(A) {
		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioId: '<%= portfolioId %>'
  			},
  			function(data) {
  			
  				var netWorth = getTotalNetWorth(data);
  			
  				// 1. networth
				A.one('#<portlet:namespace/>networthLabel').text(showInMillions(netWorth));
				
				//2. Pie Chart - By Currency
				renderChart(data, '<%= groupByField[index] %>', '#chartContainer', '<%= groupByTitle[index] %>');
				
				//4. Group By currency with Weightage.
				showWeightage(data, '<%= groupByField[index] %>', '#gridContainer', '<%= groupByTitle[index] %>', netWorth);
  			}
		);
	});
	
	function showWeightage(data, groupBy, divId, title, netWorth) {
	
		var jsonArr = [];
		var dataArray = getModifiedArray(data, groupBy);
		
		for (var i=0; i<dataArray.length; i++) {
			var obj = dataArray[i];
			jsonArr.push({
				_key: obj[0],
				currentMarketValue: obj[1],
				weightage: (obj[1] / netWorth * 100)
			});
		}
		
		YUI().use(
			'aui-datatable',
		  	function(Y) {
		    	var columns = [
		    		{key: '_key', label: title},
			 		{
			 			key: 'currentMarketValue', 
			 			label: 'Current Value',
			 			formatter: function(obj) {
			 				obj.value = accounting.formatMoney(obj.value);
			 			}			 			
			 		},
			 		{
			 			key: 'weightage', 
			 			label: 'Weightage (%)',
			 			formatter:function(obj) {
				 			obj.value = (obj.value).toFixed(2) + '%';
				 		}
			 		}
		   	 	];
		   
		   		new Y.DataTable.Base({
					columnset: columns,
			    	recordset: jsonArr
				}).render(divId);
		  	}
		);
	}
	
	function getModifiedArray(data, groupBy) {
		var dataArray = new Array();
		
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			var value = item[0].currentMarketValue;
			_.reduce(item, function(sum, obj) {
			    value += obj.currentMarketValue;
		  	});
		  	dataArray.push(new Array(key, value));
		});	
		
		return dataArray;	
	}	
	
	function renderChart(data, groupBy, divId, title){
	
		var dataArray = getModifiedArray(data, groupBy);
		
		$(divId).highcharts({
	        chart: {
	            plotBackgroundColor: null,
	            plotBorderWidth: null,
	            plotShadow: false
	        },
	        title: {
	            text: title
	        },
	        tooltip: {
	    	    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
	        },
	        plotOptions: {
	            pie: {
	                allowPointSelect: true,
	                cursor: 'pointer',
	                dataLabels: {
	                    enabled: true,
	                    color: '#000000',
	                    connectorColor: '#000000',
	                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'
	                }
	            }
	        },
	        series: [{
	            type: 'pie',
	            name: title,
	            data: dataArray
	        }]
	    });	
	}
	
	function getTotalNetWorth(data){
		var value = 0;
		_.each(data, function(itemValue){
			value += itemValue.currentMarketValue;
		});
	  	return value;
	}
</aui:script>