<%@page import="com.fingence.IConstants"%>
<h3>Net Worth: <lable id="<portlet:namespace/>networthLabel"/></h3>

<%
	int index = (allocationBy - 1);
	String[] groupByField = {"countryOfRiskName", "currency_", "security_class", "industry_sector"};
	String[] groupByTitle = {"Risk Country", "Currency", "Security Class", "Industry Sector"};
%>

<aui:row>
	<aui:column>
		<div id="chartContainer"></div>
	</aui:column>
	<aui:column>
		<div id="gridContainer"></div>
	</aui:column>	
</aui:row>

<hr/><div id="slicePortfolio"></div>

<aui:script>
	AUI().ready(function(A) {
	
		var divForMasking = A.one('#p_p_id_report_WAR_fingenceportlet_');
		if (divForMasking.loadingmask == null) {
			divForMasking.plug(A.LoadingMask, { background: '#F0F0F0' });
            divForMasking.loadingmask.toggle();
		}
			
		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioId: '<%= portfolioId %>'
  			},
  			function(data) {
  			
  				var netWorth = getTotalNetWorth(data);
  			
  				// 1. networth
				A.one('#<portlet:namespace/>networthLabel').text(formatCustom(netWorth, 'amount'));
				
				//2. Pie Chart - By Currency
				renderChart(data, '<%= groupByField[index] %>', '#chartContainer', '<%= groupByTitle[index] %>');
				
				//4. Group By currency with Weightage.
				<c:choose>
					<c:when test="<%= (allocationBy == IConstants.BREAKUP_BY_CURRENCY) %>">
						showWeightage(data, '<%= groupByField[index] %>', '#gridContainer', '<%= groupByTitle[index] %>', netWorth);
					</c:when>
					<c:otherwise>
						showTreeble(data, '<%= allocationBy %>', netWorth);
					</c:otherwise>
				</c:choose>
				
				divForMasking.loadingmask.toggle();
  			}
		);
	});
	
	function showTreeble(data, allocationBy, netWorth) {
	
		var groupByKeys = [
			[],
			["countryOfRiskName", "security_class"],
			["currency_", "security_class"],
			["security_class", "security_typ"],
			["industry_sector", "industry_group", "industry_subgroup"]
		];
		
		var itemList = _.nest(data, groupByKeys[allocationBy]);
				
		var resultantDataArray = [];
		
		_.each(itemList, function(item) {
			_.each(item, function(item) {
				var jsonObj0 = {};
				jsonObj0.level = 0;
				jsonObj0.allocation = item.name;
				jsonObj0.hierarchy = item.name;
				var gain_loss0 = 0.0; 
				var market_value0 = 0.0;			
				jsonObj0.children = [];
				_.each(item.children, function(item) {
					var jsonObj1 = {};
					jsonObj1.level = 1;
					jsonObj1.allocation = item.name;
					jsonObj1.hierarchy = jsonObj0.allocation + '>>>' + item.name;
					var gain_loss1 = 0.0; 
					var market_value1 = 0.0;
					if (allocationBy == '<%= IConstants.BREAKUP_BY_INDUSTRY_SECTOR %>') {
						jsonObj1.children = [];
					}
					
					_.each(item.children, function(item) {
						if (allocationBy == '<%= IConstants.BREAKUP_BY_INDUSTRY_SECTOR %>') {
							var jsonObj2 = {};
							jsonObj2.level = 2;
							jsonObj2.allocation = item.name;
							jsonObj2.hierarchy = jsonObj0.allocation + '>>>' + jsonObj1.allocation + '>>>' + item.name;
							var gain_loss2 = 0.0; 
							var market_value2 = 0.0;
							jsonObj2.children = [];
							_.each(item.children, function(item) {
								gain_loss2 += item.gain_loss_percent;
								market_value2 += item.currentMarketValue;
							});
							
							jsonObj2.gain_loss = gain_loss2/item.children.length;
							jsonObj2.market_value = market_value2;
							jsonObj2.weight = market_value2/netWorth * 100;
							
							gain_loss1 += jsonObj2.gain_loss;
							market_value1 += jsonObj2.market_value;					
		
							jsonObj1.children.push(jsonObj2);
						} else {
							gain_loss1 += item.gain_loss_percent;
							market_value1 += item.currentMarketValue;
						}
					});
					jsonObj1.gain_loss = gain_loss1/item.children.length;
					jsonObj1.market_value = market_value1;
					jsonObj1.weight = market_value1/netWorth * 100;
					
					gain_loss0 += jsonObj1.gain_loss;
					market_value0 += jsonObj1.market_value;			

					jsonObj0.children.push(jsonObj1);
				});
				
				jsonObj0.gain_loss = gain_loss0/item.children.length;
				jsonObj0.market_value = market_value0;
				jsonObj0.weight = market_value0/netWorth * 100;
													
				resultantDataArray.push(jsonObj0);
			});
		});
		
		YUI().use(
			'datatable',
			'gallery-treeble',
			function(Y) {
				function sendRequest() {
					table.datasource.load({
						request : {
							startIndex : 0,
							resultCount : resultantDataArray.length
						}
					});
				}
	
				// column configuration
				var cols = [
					{
						label : '&nbsp;',
						nodeFormatter : Y.Treeble.buildTwistdownFormatter(sendRequest)
					},				
					{
						key : 'allocation',
						label : 'Allocation',
		    			formatter: function(obj) {
		    				var prefix = '';
		    				for (var i=0; i<(obj.data.level*5); i++) {
		    					prefix += '&nbsp;';
		    				}		    				
		    				obj.value = prefix + '<a href="#slicePortfolio" onclick="javascript:sliceChart1(\'' + obj.data.hierarchy + '\',\'' + groupByKeys[allocationBy] + '\');">' + obj.value + '</a>';
    					},						
						allowHTML : true
					},				
					{
						key : 'gain_loss',
						label : '%age G/L',
			 			formatter: function(obj) {
			 				obj.value = formatCustom1(obj.value, 'percent');
			 			},
						allowHTML : true
					},				
					{
						key : 'market_value',
						label : 'Market Value',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
						allowHTML : true
					},				
					{
						key : 'weight',
						label : 'Weight',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'percent');
			 			},
						allowHTML : true
					}
				];
	
				// treeble config to be set on root datasource
				var schema = {
					resultFields : ['hierarchy', 'level', 'allocation', 'gain_loss', 'market_value', 'weight',
						'_open', {
							key : 'children',
							parser : 'treebledatasource'
						} 
					]
				};
	
				var schema_plugin_config = {
					fn : Y.Plugin.DataSourceArraySchema,
					cfg : {
						schema : schema
					}
				};
	
				var treeble_config = {
					generateRequest : function() {
					},
					schemaPluginConfig : schema_plugin_config,
					childNodesKey : 'children',
					nodeOpenKey : '_open',
					totalRecordsReturnExpr : '.meta.totalRecords'
				};
		
				// root data source
		
				var root = new Y.DataSource.Local({
					source : resultantDataArray
				});
				root.treeble_config = Y.clone(treeble_config, true);
				root.plug(schema_plugin_config);
		
				// TreebleDataSource
		
				var ds = new Y.DataSource.Treeble({
					root : root,
					paginateChildren : false,
					uniqueIdKey : 'name' // normally, it would be a database row id, but title happens to be unique in this example
				});
		
				// DataTable
		
				var table = new Y.Treeble({
					columns : cols
				});
				
				table.plug(Y.Plugin.DataTableDataSource, {
					datasource : ds
				});
		
				table.render("#gridContainer");
		
				sendRequest();
			}
		);		
	}
	
	function getDataGroupedBy(data, groupBy, netWorth) {
		var resultantDataArray = [];
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			var resultantObj = {};
			var totalFxGainLoss = 0.0;
			var totalPurchaseValue = 0.0;
			var totalCurrentValue = 0.0;
			
			_.each(item, function(item){
				totalCurrentValue += item.currentMarketValue;
				totalPurchaseValue += item.purchasedMarketValue;
				totalFxGainLoss += item.fx_gain_loss;
			});
			
			resultantObj._key = key;
			resultantObj.fxGainLoss = totalFxGainLoss;
			resultantObj.gainLossPercent = (totalCurrentValue-totalPurchaseValue)/totalPurchaseValue * 100.0;
			resultantObj.currentMarketValue = totalCurrentValue;
			resultantObj.weightage = totalCurrentValue/netWorth * 100.0;
			
			resultantDataArray.push(resultantObj);
		});
		
		return resultantDataArray;
	}
		
	function showWeightage(data, groupBy, divId, title, netWorth) {
		var jsonArr = getDataGroupedBy(data, groupBy, netWorth);
		YUI().use(
			'aui-datatable',
		  	function(Y) {
		    	var columns = [
		    		{
		    			key: '_key',
		    			label: title,
		    			formatter: function(obj){
		    				obj.value = '<a href="#slicePortfolio" onclick="javascript:sliceChart(\'' + obj.value + '\');">' + obj.value + '</a>';
    					},
    					allowHTML:true,
    					sortable: true
	    			},
	    			<c:if test="<%= index == 1 %>">
				 		{
				 			key: 'fxGainLoss', 
				 			label: 'FX Gain/Loss',
				 			formatter: function(obj) {
				 				obj.value = formatCustom1(obj.value, 'amount');
				 			},
				 			allowHTML:true,
				 			sortable: true 			
				 		},		    			
	    			</c:if>    			
			 		{
			 			key: 'gainLossPercent', 
			 			label: 'Gain/Loss',
			 			formatter: function(obj) {
			 				obj.value = formatCustom1(obj.value, 'percent');
			 			},
			 			allowHTML:true,
			 			sortable: true 			
			 		},
			 		{
			 			key: 'currentMarketValue', 
			 			label: 'Market Value',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
			 			allowHTML:true,
			 			sortable: true
			 		},
			 		{
			 			key: 'weightage', 
			 			label: 'Weight',
			 			formatter:function(obj) {
				 			obj.value = formatCustom(obj.value, 'percent');
				 		},
				 		allowHTML:true,
				 		sortable: true
			 		}
		   	 	];
		   
		   		new Y.DataTable({
					columnset: columns,
			    	recordset: jsonArr
				}).render(divId);
		  	}
		);
	}		

	function getModifiedArray(data, groupBy) {
		var dataArray = new Array();
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			var value = item[0].currentMarketValue;
			_.reduce(item, function(sum, obj) {
			    value += obj.currentMarketValue;
		  	});
		  	
		  	if (key == '' || key == '0') {
				key = 'Un-Specified';
			}
		  	dataArray.push(new Array(key, value));
		});	
		return dataArray;	
	}	
	
	function renderChart(data, groupBy, divId, title){
		
		var dataArray = getModifiedArray(data, groupBy);
				
		$(divId).highcharts({
	        chart: {
	            plotBackgroundColor: null,
	            plotBorderWidth: null,
	            plotShadow: false,
	        },
	        title: {
	            text: title
	        },
	        tooltip: {
	    	    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
	        },
	        plotOptions: {
	            pie: {
	            	size: "60%",
	                allowPointSelect: true,
	                cursor: 'pointer',
	                dataLabels: {
	                    enabled: true,
	                    color: '#000000',
	                    connectorColor: '#000000',
	                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'
	                }
	            }
	        },
	        series: [{
	            type: 'pie',
	            name: title,
	            data: dataArray,
	            events:{
	                click: function (event) {
	                    sliceChart(event.point.name);
	                }
              	}
	        }]
	    });
	}
	
	function sliceChart(sliceBy){
	
		var portfolioId = '<%= portfolioId %>';
		var allocationBy = '<%= allocationBy %>'
		var allocationParam = new String();
		
		if (allocationBy == <%= IConstants.BREAKUP_BY_RISK_COUNTRY %>){
			allocationParam = '<%= groupByField[0] %>';
		} else if(allocationBy == <%= IConstants.BREAKUP_BY_CURRENCY %>){
			allocationParam = '<%= groupByField[1] %>';
		} else if(allocationBy == <%= IConstants.BREAKUP_BY_SECURITY_CLASS %>){
			allocationParam = '<%= groupByField[2] %>';
		} else if(allocationBy == <%= IConstants.BREAKUP_BY_INDUSTRY_SECTOR %>){
			allocationParam = '<%= groupByField[3] %>';
		}
		
 		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioId: '<%= portfolioId %>'
  			},
  			function(data) {
  				showPortfolioItems(data, allocationParam, sliceBy, '#slicePortfolio');
  			}
		);
	}
	
	function sliceChart1(hierarchy, groupByKeys) {
	
		var keywords = hierarchy.split('>>>');
		var level = keywords.length;
	
 		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioId: '<%= portfolioId %>'
  			},
  			function(data) {  			
  				var itemList = _.nest(data, groupByKeys.split(',').slice(0,level));
  				  				
  				var jsonArray = [];				
				_.each(itemList, function(item) {
					_.each(item, function(item) {
						if (item.name == keywords[0]) {
							if (level == 1) {
								jsonArray = item.children;
							} else {
								_.each(item.children, function(item) {
									if (item.name == keywords[1]) {
										if (level == 2) {
											jsonArray = item.children;
										} else {
											_.each(item.children, function(item) {
												if (item.name == keywords[2]) {
													jsonArray = item.children;
												}
											});
										}
									}
								});
							} 
						}
					});
				});  				
  				
  				// display grid
		 		var divContent = document.getElementById('slicePortfolio');
				if (divContent) {
					divContent.innerHTML = "";
				}
				displayItemsGrid(jsonArray, '#slicePortfolio'); 				
  			}
		);
	}
	
	function showPortfolioItems(data, allocationParam, sliceBy, divId){
	
		var divContent = document.getElementById('slicePortfolio');
		if (divContent) {
			divContent.innerHTML = "";
		}	
	
		_(_.groupBy(data, allocationParam)).map(function(itemList, key) {	
			if (key == sliceBy) {
				displayItemsGrid(itemList, divId);
			}
		});		
	}
	
	function getTotalNetWorth(data){
		var value = 0;
		_.each(data, function(itemValue){
			value += itemValue.currentMarketValue;
		});
	  	return value;
	}
</aui:script>