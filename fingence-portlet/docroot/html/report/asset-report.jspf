<%@page import="java.util.Map.Entry"%>

<h3>Net Worth: <lable id="<portlet:namespace/>networthLabel"/></h3>

<%
	int allocationByIndex = -1;
	String[] groupByField = {"countryOfRiskName", "currencyDesc", "security_class", "industry_sector", "security_class"};
 	String[] groupByTitle = {"Risk Country", "Currency", "Security Class", "Industry Sector", "Asset Class"};
 	for(int i = 0; i < groupByTitle.length; i++) {
 		if (allocationByName.equalsIgnoreCase(groupByTitle[i])) {
 			allocationByIndex = i;
 			break;
 		}
 	}
%>

<div id="chartContainer"></div>
<div id="gridContainer"></div>

<hr/><div id="slicePortfolio"></div>

<aui:script>

	// Global Variables BEGIN
	var _data = null;
	var _netWorth = 0.0;
	
	var groupByKeys = [
		[],
		["countryOfRiskName", "security_class"],
		["currencyDesc"],
		["security_class", "security_typ"],
		["industry_sector", "security_class"],
		["security_class", "asset_class", "asset_sub_class"]
	];
	// Global Variables END
	
	AUI().ready(function(A) {
	
		var divForMasking = A.one('#p_p_id_report_WAR_fingenceportlet_');
		if (divForMasking.loadingmask == null) {
			divForMasking.plug(A.LoadingMask, { background: '#F0F0F0' });
            divForMasking.loadingmask.toggle();
		}
			
		Liferay.Service(
  			'/fingence-portlet.myresult/get-my-results',
  			{
    			portfolioIds: '<%= portfolioIds %>',
    			allocationBy: '<%= allocationByIndex+1 %>'
  			},
  			function(data) {
  			
  				_data = data;  			
  				_netWorth = getTotalNetWorth(data);
  			
  				// 1. networth
				A.one('#<portlet:namespace/>networthLabel').text(formatCustom(_netWorth, 'amount'));
				
				//2. Pie Chart - By Currency
				renderChart('<%= groupByField[allocationByIndex] %>', '#chartContainer', '<%= groupByTitle[allocationByIndex] %>');
				
				//4. Group By currency with Weightage.
				showTreeble('<%= (allocationByIndex+1) %>');
				
				divForMasking.loadingmask.toggle();
  			}
		);
	});
	
	function showTreeble(allocationBy) {
								
		var itemList = _.nest(_data, groupByKeys[allocationBy]);
										
		var resultantDataArray = [];
						
		_.each(itemList, function(item) {
			_.each(item, function(item) {
			
				var jsonObj0 = {};
				jsonObj0.level = 0;
				jsonObj0.allocation = item.name;
				jsonObj0.hierarchy = item.name;
				var gain_loss0 = 0.0;
				var fx_gain_loss0 = 0.0; 
				var usd_invested0 = 0.0;
				var market_value0 = 0.0;
				var conversion0 = 1.0;
				var currencySymbol0 = "";
							
				if (item.children[0].assetId) {
					_.each(item.children, function(item) {
						gain_loss0 += item.gain_loss_percent;
						fx_gain_loss0 += item.fx_gain_loss;
						usd_invested0 += item.purchasedMarketValue;
						market_value0 += item.currentMarketValue;
						conversion0 = item.current_fx;
						currencySymbol0 = item.currencySymbol;
						
						
						
					});
				} else {
				
					if (jsonObj0.allocation != 'Un-Specified') {
						jsonObj0.children = [];	
					} 
					
					_.each(item.children, function(item) {
						var jsonObj1 = {};
						jsonObj1.level = 1;
						jsonObj1.allocation = item.name;
						jsonObj1.hierarchy = jsonObj0.allocation + '>>>' + item.name;
						var gain_loss1 = 0.0; 
						var fx_gain_loss1 = 0.0; 
						var usd_invested1 = 0.0;
						var market_value1 = 0.0;
												
						var threelevels = (allocationBy == '<%= IConstants.BREAKUP_BY_ASSET_CLASS %>' && jsonObj0.allocation == 'Fixed Income' && jsonObj1.allocation == 'Bond');
						
						if (threelevels) {
							jsonObj1.children = [];
						}
						
						_.each(item.children, function(item) {
							if (threelevels) {
								var jsonObj2 = {};
								jsonObj2.level = 2;
								jsonObj2.allocation = item.name;
								jsonObj2.hierarchy = jsonObj0.allocation + '>>>' + jsonObj1.allocation + '>>>' + item.name;
								var gain_loss2 = 0.0; 
								var fx_gain_loss2 = 0.0; 
								var usd_invested2 = 0.0;
								var market_value2 = 0.0;
								_.each(item.children, function(item) {
									gain_loss2 += item.gain_loss_percent;
									fx_gain_loss2 += item.fx_gain_loss;
									usd_invested2 += item.purchasedMarketValue;
									market_value2 += item.currentMarketValue;
								});
								
								jsonObj2.gain_loss = gain_loss2/item.children.length;
								jsonObj2.fx_gain_loss = fx_gain_loss2;
								jsonObj2.usd_invested = usd_invested2;
								jsonObj2.market_value = market_value2;
								jsonObj2.weight = market_value2/_netWorth * 100;
								
								gain_loss1 += jsonObj2.gain_loss;
								fx_gain_loss1 += jsonObj2.fx_gain_loss;
								usd_invested1 += jsonObj2.usd_invested;
								market_value1 += jsonObj2.market_value;					
			
								jsonObj1.children.push(jsonObj2);
							} else {
							
								//if (allocationBy == '<%= IConstants.BREAKUP_BY_ASSET_CLASS %>' && jsonObj0.allocation == 'Equity') {
								if (threelevels) {
									var cnt = 0;
									_.each(item.children, function(item) {
										gain_loss1 += item.gain_loss_percent;
										fx_gain_loss1 += item.fx_gain_loss;
										usd_invested1 += item.purchasedMarketValue;
										market_value1 += item.currentMarketValue;
										cnt++;								
									});
									gain_loss1 = gain_loss1 / cnt;
									fx_gain_loss1 = fx_gain_loss1 / cnt;
								} else {
									gain_loss1 += item.gain_loss_percent;
									fx_gain_loss1 += item.fx_gain_loss;
									usd_invested1 += item.purchasedMarketValue;
									market_value1 += item.currentMarketValue;
								}	
							}
						});
						
						jsonObj1.gain_loss = gain_loss1/item.children.length;
						jsonObj1.fx_gain_loss = fx_gain_loss1;
						jsonObj1.usd_invested = usd_invested1;
						jsonObj1.market_value = market_value1;
						jsonObj1.weight = market_value1/_netWorth * 100;
						
						gain_loss0 += jsonObj1.gain_loss;
						fx_gain_loss0 += jsonObj1.fx_gain_loss;
						usd_invested0 += jsonObj1.usd_invested;
						market_value0 += jsonObj1.market_value;			
	
						if (jsonObj0.allocation != 'Un-Specified') {
							jsonObj0.children.push(jsonObj1);
						}
					});					
				}
				
				jsonObj0.gain_loss = gain_loss0/item.children.length;
				jsonObj0.fx_gain_loss = fx_gain_loss0;
				jsonObj0.usd_invested = usd_invested0;
				jsonObj0.market_value = market_value0;
				jsonObj0.conversion = conversion0;
				jsonObj0.currencySymbol = currencySymbol0;				
				jsonObj0.weight = market_value0/_netWorth * 100;
																
				resultantDataArray.push(jsonObj0);
			});
		});
															
		YUI().use(
			'datatable',
			'gallery-treeble',
			function(Y) {
				function sendRequest() {
					table.datasource.load({
						request : {
							startIndex : 0,
							resultCount : resultantDataArray.length
						}
					});
				}
	
				// column configuration
				var cols = [
					<c:if test="<%= (allocationByIndex+1) != IConstants.BREAKUP_BY_CURRENCY %>">
						{
							label : '&nbsp;',
							nodeFormatter : Y.Treeble.buildTwistdownFormatter(sendRequest)
						},					
					</c:if>					
					{
						key : 'allocation',
						label : 'Allocation',
		    			formatter: function(obj) {
		    				var prefix = '';
		    				for (var i=0; i<(obj.data.level*4); i++) {
		    					prefix += '&nbsp;';
		    				}		    				
		    				obj.value = prefix + '<a href="#slicePortfolio" onclick="javascript:sliceChart(\'' + obj.data.hierarchy + '\',\'' + groupByKeys[allocationBy] + '\');">' + obj.value + '</a>';
    					},						
						allowHTML : true
					},
					{
						key : 'usd_invested',
						label : 'USD Invested',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
						allowHTML : true
					},																	
					{
						key : 'market_value',
						label : 'Market Value<br/>in USD',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'amount');
			 			},
						allowHTML : true
					},
					<c:if test="<%= (allocationByIndex+1) == IConstants.BREAKUP_BY_CURRENCY %>">
						{
							key : 'market_value_in_currency',
							label : 'Market Value<br/>in Given Currency',
				 			formatter: function(obj) {
				 				console.log("===>>>" + obj.data.currencySymbol);
				 				
				 				obj.value = formatCustom2(obj.data.market_value / obj.data.conversion, 'amount', obj.data.currencySymbol);
				 			},
							allowHTML : true
						},	
						{
							key : 'capital_gain_loss',
							label : 'Capital Gain / Loss',
				 			formatter: function(obj) {
				 				var total_gain_loss = obj.data.market_value - obj.data.usd_invested;
				 				obj.value = formatCustom(total_gain_loss - obj.data.fx_gain_loss, 'amount');
				 			},
							allowHTML : true
						},						
						{
							key : 'fx_gain_loss',
							label : 'FX Gain / Loss',
				 			formatter: function(obj) {
				 				obj.value = formatCustom1(obj.value, 'amount');
				 			},
							allowHTML : true
						},												
					</c:if>		
					{
						key : 'total_gain_loss',
						label : 'Total Gain/Loss',
			 			formatter: function(obj) {
			 				obj.value = formatCustom1(obj.data.market_value - obj.data.usd_invested, 'amount');
			 			},
						allowHTML : true
					},					
					{
						key : 'gain_loss',
						label : '% Gain/Loss',
			 			formatter: function(obj) {
			 				obj.value = formatCustom1(obj.value, 'percent');
			 			},
						allowHTML : true
					},								
					{
						key : 'weight',
						label : 'Weight',
			 			formatter: function(obj) {
			 				obj.value = formatCustom(obj.value, 'percent');
			 			},
						allowHTML : true
					}
				];
	
				// treeble config to be set on root datasource
				var schema = {
					resultFields : ['hierarchy', 'level', 'allocation', 'usd_invested', 'market_value', 'market_value_in_currency', 'conversion', 'currencySymbol', 'capital_gain_loss', 'fx_gain_loss', 'total_gain_loss', 'gain_loss', 'weight',
						'_open', {
							key : 'children',
							parser : 'treebledatasource'
						} 
					]
				};
	
				var schema_plugin_config = {
					fn : Y.Plugin.DataSourceArraySchema,
					cfg : {
						schema : schema
					}
				};
	
				var treeble_config = {
					generateRequest : function() {
					},
					schemaPluginConfig : schema_plugin_config,
					childNodesKey : 'children',
					totalRecordsReturnExpr : '.meta.totalRecords'
				};
		
				// root data source
		
				var root = new Y.DataSource.Local({
					source : resultantDataArray
				});
				root.treeble_config = Y.clone(treeble_config, true);
				root.plug(schema_plugin_config);
		
				// TreebleDataSource
		
				var ds = new Y.DataSource.Treeble({
					root : root,
					paginateChildren : false,
					uniqueIdKey : 'name' // normally, it would be a database row id, but title happens to be unique in this example
				});
		
				// DataTable
		
				var table = new Y.Treeble({
					columns : cols
				});
				
				table.plug(Y.Plugin.DataTableDataSource, {
					datasource : ds
				});

				var placeHolderDiv = AUI().one("#gridContainer");
				
				if (placeHolderDiv != null) {
					table.render("#gridContainer");
				}
		
				sendRequest();
			}
		);		
	}
	
	function getModifiedArray(data, groupBy) {
		var dataArray = new Array();
		_(_.groupBy(data, groupBy)).map(function(item, key) {
			var value = item[0].currentMarketValue;
			_.reduce(item, function(sum, obj) {
			    value += obj.currentMarketValue;
		  	});
		  	
		  	if (key == '' || key == '0') {
				key = 'Un-Specified';
			}
		  	dataArray.push(new Array(key, value));
		});	
		return dataArray;	
	}	
	
	function renderChart(groupBy, divId, title){
			
		var dataArray = getModifiedArray(_data, groupBy);
		
		$(divId).highcharts({
			legend: {
		    	enabled: true,
		    	align: 'right',
	        	borderColor: 'grey',
	        	borderWidth: 1,
		    	layout: 'vertical',
		    	verticalAlign: 'top',
		    	y: 100
		    },
	    		
	        chart: {
	            plotBackgroundColor: null,
	            plotBorderWidth: null,
	            plotShadow: false,
	        },
	        title: {
	            text: title
	        },
	        tooltip: {
	    	    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
	        },
	        plotOptions: {
	            pie: {
	            	size: "60%",
	                cursor: 'pointer',
	                dataLabels: {
	                    enabled: true,
	                    color: '#000000',
	                    connectorColor: '#000000',
	                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'
	                },
	                showInLegend: true
	            }
	        },
	        series: [{
	            type: 'pie',
	            data: dataArray,
	            events:{
	                click: function (event) {
	                    sliceChart(event.point.name, groupBy);
	                }
              	}
	        }]		
		});
	}
	
	function sliceChart(hierarchy, groupByKeys) {
	
		var keywords = hierarchy.split('>>>');
		var level = keywords.length;
	
		var itemList = _.nest(_data, groupByKeys.split(',').slice(0,level));
				  				
		var jsonArray = [];				
		_.each(itemList, function(item) {
			_.each(item, function(item) {
				if (item.name == keywords[0]) {
					if (level == 1) {
						jsonArray = item.children;
					} else {
						_.each(item.children, function(item) {
							if (item.name == keywords[1]) {
								if (level == 2) {
									jsonArray = item.children;
								} else {
									_.each(item.children, function(item) {
										if (item.name == keywords[2]) {
											jsonArray = item.children;
										}
									});
								}
							}
						});
					} 
				}
			});
		});		
				
		// display grid
		displayItemsGrid(jsonArray, '#slicePortfolio', _netWorth);
	}
</aui:script>